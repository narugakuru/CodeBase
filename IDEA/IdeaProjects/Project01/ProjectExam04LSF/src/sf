1.背包问题的贪心算法
void Knapsack(int n,float M,float v[],float w[],float x[])
{
       Sort(n,v,w);
       int i;
       for (i=1;i<=n;i++) x[i]=0;
       float c=M;
       for (i=1;i<=n;i++) {
          if (w[i]>c) break;
          x[i]=1;
          c - =w[i];
          }
       if (i<=n) x[i]=c/w[i];
}
2.最大子段和: 动态规划算法
int MaxSum(int n, int a[])
{
    int sum=0, b=0；   //sum存储当前最大的b[j], b存储b[j]
    for(int j=1； j<=n； j++)  {
        if (b>0)  b+= a[j] ；
        else  b=a[i];     ；    //一旦某个区段和为负，则从下一个位置累和
 if(b>sum) sum=b;

     }
     return sum；
 }
3.快速排序
template<class Type>
void QuickSort (Type a[], int p, int r)
{
      if (p<r) {
        int q=Partition(a,p,r);
        QuickSort (a,p,q-1); //对左半段排序
        QuickSort (a,q+1,r); //对右半段排序
        }
}

4.排列问题
Template <class Type>
void perm(Type list[],  int k, int m )
{ //产生[list[k:m]的所有排列
    if(k==m)
     {  //只剩下一个元素
         for (int i=0;i<=m;i++)  cout<<list[i];
         cout<<endl;
    }
    else  //还有多个元素待排列，递归产生排列
       for (int i=k; i<=m; i++)
        {
           swap(list[k]，list[i]);
           perm(list,k+1;m);
           swap(list[k],list[i]);
     }
  }
5.给定已按升序排好序的n个元素a[0:n-1]，现要在这n个元素中找出一特定元素x。
据此容易设计出二分搜索算法：
template<class Type>
int BinarySearch(Type a[], const Type& x, int l, int r)
{
     while (l<=r ){
        int m = ((l+r)/2);
        if (x == a[m]) return m;
        if (x < a[m]) r = m-1; else l = m+1;
        }
    return -1;
}

6、合并排序描述如下：
template<class Type>
void Mergesort(Type a[ ], int left, int right)
{
if (left<right){
int i=( left+right)/2;
Mergesort(a, left, i );
Mergesort(a, i+1, right);
Merge(a,b, left,i,right);//合并到数组b
Copy(a,b, left,right ); //复制到数组a
}
}

 7、以下是计算xm的值的过程
int  power ( x, m )
{//计算xm的值并返回。
y=( 1  );i=m;
While(i- - >0)
   y=y*x;
 (return y) ;
}
